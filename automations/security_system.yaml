#######
#
#         Alarm System
#     State Change Routines
#
#######

# Automation will trigger when the alarm changes to armed home, and will lock all the doors
- id: 'arm_home_routine'
  initial_state: true
  hide_entity: true
  alias: Alarm Armed Home Routine
  trigger:
  - platform: state
    entity_id: alarm_control_panel.ha_alarm
    to: armed_home
  condition: []
  action:
  - service: lock.lock

# Automation will trigger when alarm changes to armed away, and will lock all the doors
- id: 'arm_away_routine'
  initial_state: true
  hide_entity: true
  alias: Alarm Armed Away Routine
  trigger:
  - entity_id: alarm_control_panel.ha_alarm
    to: armed_away
    platform: state
  - entity_id: alarm_control_panel.ha_alarm
    to: armed_home
    platform: state
  condition: []
  action:
  - service: lock.lock

# Automation will trigger when alarm disarms after being triggered
# actions turn off the sirens, the cops on the porch scripts, and resets the porch lights
- id: 'trigger_disarm_routine'
  initial_state: true
  hide_entity: true
  alias: Alarm Trigger Disarm Routine
  trigger:
  - entity_id: alarm_control_panel.ha_alarm
    from: triggered
    platform: state
  condition: []
  action:
  - service: switch.turn_off #turn off the sirens
    data:
      entity_id:
      - switch.bedroom_siren
      - switch.livingroom_siren
  - service: script.turn_off #turn off both scripts at the same time to stop the loop
    data:
      entity_id:
      - script.1527648825148
      - script.1527648844985
  - service: light.turn_on #set light to white so that it's not blue or red when it gets turned back on later
    data:
      color_name: white
      entity_id: light.outside_frontporch
  - delay: '00:00:01' #wait a second before turning it back off, this is to mitigate the light loop issue. 
  - service: light.turn_off #turn front porch light back off
    data:
      entity_id: light.outside_frontporch

# Automation triggered by alarm triggering, turns on the sirens, turns on all the lights 
- alias: Alarm Trigger after Pending
  initial_state: true #This makes this automation on by default, so on reboot it will turn itself on.
  hide_entity: true #This makes it so the automation doesn't show up in the UI. You will have to go to the states page to toggle this automation, or toggle it via an automation
  trigger:
  -  platform: state
     entity_id: alarm_control_panel.ha_alarm
     from: pending   #only trigger when it moves from pending (ie: waiting for code to disarm before triggering. Needs testing to make sure it will still trigger when moving from armed home to triggered, have to do it this way to prevent the alarm from triggering during the pending time)
     to: triggered 
  action: 
    - service: switch.turn_on #turn on the sirens
      data: 
        entity_id: 
        - switch.livingroom_siren
        - switch.bedroom_siren
    - service: light.turn_on #turn on all lights
    - service: script.1527648825148 #start the cops on the porch light loop
      
###############
#
#       Alarm System 
#    Triggering Routine(s) 
#
###############

#If any if the doors or window sensors open, trigger the alarm, and send notifications of how it happened.
- id: 'doors_and_windows_trigger_alarm'
  alias: Door and Window Triggers Alarm
  initial_state: true #This makes this automation on by default, so on reboot it will turn itself on.
  hide_entity: true #This makes it so the automation doesn't show up in the UI. You will have to go to the states page to toggle this automation, or toggle it via an automation
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.back_door
    - binary_sensor.bathroom_window
    - binary_sensor.bedroom_window1
    - binary_sensor.bedroom_window2
    - binary_sensor.front_door
    - binary_sensor.kitchen_window1
    - binary_sensor.kitchen_window2
    - binary_sensor.kitchen_window3
    - binary_sensor.livingroom_window1
    - binary_sensor.livingroom_window2
    to: 'on'
  condition:  #only trigger automation if the alarm is armed, or already triggered. 
    condition: or
    conditions:
    - condition: state
      entity_id: alarm_control_panel.ha_alarm
      state: armed_home
    - condition: state
      entity_id: alarm_control_panel.ha_alarm
      state: armed_away
    - condition: state
      entity_id: alarm_control_panel.ha_alarm
      state: triggered
    #- condition: state
    #  entity_id: alarm_control_panel.ha_alarm
    ## Need to figure out how to make it so this will trigger if alarm is pending from armed to triggered. 
  action:
  - service: alarm_control_panel.alarm_trigger
    entity_id: alarm_control_panel.ha_alarm
  - service: mqtt.publish
    data_template:
      payload_template: 'The {{ states[trigger.entity_id.split(".")[0]][ trigger.entity_id.split(".")[1]].name}} just opened! Disarm the Alarm immediatly before police are called.'
      topic: livingroom_alarmpanel/voice
  - service: mqtt.publish
    data_template:
      payload_template: 'The {{ states[trigger.entity_id.split(".")[0]][ trigger.entity_id.split(".")[1]].name}} just opened! Disarm the Alarm immediatly before police are called.'
      topic: bedroom_alarmpanel/voice
  - service: mqtt.publish
    data_template:
      payload_template: 'The {{ states[trigger.entity_id.split(".")[0]][ trigger.entity_id.split(".")[1]].name}} just opened! Disarm the Alarm immediatly before police are called.'
      topic: bathroom_alarmpanel/voice
  ### Add action to speak warning on the media_player.everything speaker group. Using the same message as the mqtt voice messages, potentially replace those messages with a TTS now that we have a siren. Let alarm panel voice prompts be something else.
  - service: notify.discord
    data:
      target: !secret discord_ha-security-feed #channel id to put the notification
      message: An alarm has been Triggered! #fallback message if the template fails. 
    data_template:
      message: An alarm has been triggered by the {{ states[trigger.entity_id.split(".")[0]][
        trigger.entity_id.split(".")[1]].name }} opening!

#Motion Sensors to trigger alarm. This is disabled by default because the robo vac was triggering the alarm. Long term plan is to have the robo vac report when it's running and temporarily turn off this automation.
- alias: Motion Sensors to Trigger Alarm
  initial_state: 'off'
  trigger:
  - platform: state
    entity_id:
    - sensor.bathroom_multisensor_alarm_level
    - sensor.bathroom_shower_multisensor_alarm_level
    - sensor.bedroom_multisensor_alarm_level
    - sensor.kitchen_multisensor_alarm_level
    - sensor.livingroom_multisensor_alarm_level
    to: '255'
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: alarm_control_panel.ha_alarm
      state: armed_away
    - condition: state
      entity_id: alarm_control_panel.ha_alarm
      state: triggered
    #- condition: state
    #  entity_id: alarm_control_panel.ha_alarm
    ## Need to figure out how to make it so this will trigger if alarm is pending from armed to triggered. 
  action:
  - service: alarm_control_panel.alarm_trigger
    entity_id: alarm_control_panel.ha_alarm
  - service: mqtt.publish
    data_template:
      payload_template: 'The {{ states[trigger.entity_id.split(".")[0]][ trigger.entity_id.split(".")[1]].name}} just opened! Disarm the Alarm immediatly before police are called.'
      topic: livingroom_alarmpanel/voice
  - service: mqtt.publish
    data_template:
      payload_template: 'The {{ states[trigger.entity_id.split(".")[0]][ trigger.entity_id.split(".")[1]].name}} just opened! Disarm the Alarm immediatly before police are called.'
      topic: bedroom_alarmpanel/voice
  - service: mqtt.publish
    data_template:
      payload_template: 'The {{ states[trigger.entity_id.split(".")[0]][ trigger.entity_id.split(".")[1]].name}} just opened! Disarm the Alarm immediatly before police are called.'
      topic: bathroom_alarmpanel/voice
  ### Add action to speak warning on the media_player.everything speaker group. Using the same message as the mqtt voice messages, potentially replace those messages with a TTS now that we have a siren. Let alarm panel voice prompts be something else.
  - service: notify.discord
    data:
      target: !secret discord_ha-security-feed #channel id to put the notification
      message: An alarm has been Triggered! #fallback message if the template fails. 
    data_template:
      message: 'An alarm has been triggered by the {{ states[trigger.entity_id.split(".")[0]][trigger.entity_id.split(".")[1]].name }} opening!'

###################
#
#       Door & Window
#           Chimes
#
##################

### When Doors or Windows open, send a tts notification to the alarm panels
#- id: 'windows_door_open_tts_notification'
#  alias: Windows & Doors Open triggers TTS notification to Alarm Panel
#  trigger: 
#    - platform: state
#      entity_id:
#      - binary_sensor.back_door
#      - binary_sensor.bathroom_window
#      - binary_sensor.bedroom_window1
#      - binary_sensor.bedroom_window2
#      - binary_sensor.front_door
#      - binary_sensor.kitchen_window1
#      - binary_sensor.kitchen_window2
#      - binary_sensor.kitchen_window3
#      - binary_sensor.livingroom_window1
#      - binary_sensor.livingroom_window2
#      to: 'on'
#  condition: []
#  action:
#  - service: mqtt.publish
#    data:
#      payload_template: The {{ states[trigger.entity_id.split(".")[0]][ trigger.entity_id.split(".")[1]].name
#        }} opened
#      topic: livingroom_alarmpanel/voice
#  - service: mqtt.publish
#    data:
#      payload_template: The {{ states[trigger.entity_id.split(".")[0]][ trigger.entity_id.split(".")[1]].name
#        }} opened
#      topic: bedroom_alarmpanel/voice
#  - service: mqtt.publish
#    data:
#      payload_template: The {{ states[trigger.entity_id.split(".")[0]][ trigger.entity_id.split(".")[1]].name
#        }} opened
#      topic: bathroom_alarmpanel/voice

### Front Door open plays a door chime.
#- alias: Front Door Chime
#  trigger:
#    - platform: state
#      entity_id: binary_sensor.front_door
#      to: 'on'
#  condition: []
#  action: []

### Back Door open plays a door chime
#- alias: Back Door Chime
#  trigger:
#    - platform: state
#      entity_id: binary_sensor.back_door
#      to: 'on'
#  condition: []
#  action: []

### Window open plays a chime
#- alias: Windows Chime
#  trigger: 
#    - platform: state
#      entity_id:
#      - binary_sensor.back_door
#      - binary_sensor.bathroom_window
#      - binary_sensor.bedroom_window1
#      - binary_sensor.bedroom_window2
#      - binary_sensor.front_door
#      - binary_sensor.kitchen_window1
#      - binary_sensor.kitchen_window2
#      - binary_sensor.kitchen_window3
#      - binary_sensor.livingroom_window1
#      - binary_sensor.livingroom_window2
#      to: 'on'
#  condition: []
#  action: []  #action needs to check a list of inputs and set the settings with `zwave.set_config_parameter` based on them, then turn the siren's switch
################ input_boolean.alarm_strobe
################ input_boolean.backdoor_chime_strobe
################ input_boolean.frontdoor_chime_strobe
################ input_boolean.windows_chime_strobe
################ input_select.alarm_siren_sound
################ input_select.backdoor_chime_sound
################ input_select.frontdoor_chime_sound
################ input_select.windows_chime_sound
################ input_number.backdoor_chime_length
################ input_number.backdoor_chime_volume
################ input_number.frontdoor_chime_length
################ input_number.frontdoor_chime_volume
################ input_number.homealarmvolume
################ input_number.windows_chime_length
################ input_number.windows_chime_volume
